#-------------------------------------------------------------------------------
# JARVIS
#-------------------------------------------------------------------------------

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS On)
CMAKE_MINIMUM_REQUIRED(VERSION 3.0.2)
INCLUDE(macros.txt)
PROJECT(JARVIS)
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
include(CMakeDependentOption)

SET(JARVIS_ROOT ${CMAKE_CURRENT_SOURCE_DIR})
# interface library, every lib including this will also copy this libraries settings
#ADD_LIBRARY(JARVIS INTERFACE)

IF(APPLE)
SET(DEFAULT_PLATFORM "J_PLATFORM_IOS")
SET(DEFAULT_RENDERER "J_RENDERER_METAL")
ELSEIF(WIN32)
SET(DEFAULT_PLATFORM "J_PLATFORM_PC")
SET(DEFAULT_RENDERER "J_RENDERER_DX12")
ELSEIF(ANDROID)
SET(DEFAULT_PLATFORM "J_PLATFORM_ANDROID")
SET(DEFAULT_RENDERER "J_RENDERER_GL4")
ELSE()
SET(DEFAULT_PLATFORM "J_PLATFORM_PC")
SET(DEFAULT_RENDERER "J_RENDERER_VULKAN")
ENDIF()

SET(J_RENDERER_DX12 OFF)
SET(J_RENDERER_GL4 OFF)
SET(J_RENDERER_METAL OFF)
SET(J_RENDERER_VULKAN OFF)

SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${JARVIS_ROOT}/bin )
FOREACH( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
    set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${JARVIS_ROOT}/bin )
ENDFOREACH( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

SET(J_PLATFORM ${DEFAULT_PLATFORM} CACHE STRING "Renderer selected at configure time")
SET_PROPERTY(CACHE J_PLATFORM PROPERTY STRINGS "J_PLATFORM_PC" "J_PLATFORM_IOS" "J_PLATFORM_ANDROID" "J_PLATFORM_EMSCRIPTEN")
SET(${J_PLATFORM} ON)
ADD_DEFINITIONS(-D${J_PLATFORM})

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${JARVIS_ROOT}/bin)
SET(J_RENDERER ${DEFAULT_RENDERER} CACHE STRING "Renderer selected at configure time")
SET_PROPERTY(CACHE J_RENDERER PROPERTY STRINGS "J_RENDERER_DX12" "J_RENDERER_GL4" "J_RENDERER_METAL" "J_RENDERER_VULKAN")
SET(${J_RENDERER} ON)
ADD_DEFINITIONS(-D${J_RENDERER})

IF(WIN32)
	ADD_DEFINITIONS(-D__WIN32__)	
ELSEIF(APPLE)
	ADD_DEFINITIONS(-D__APPLE__)
	SET(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++11")
	SET(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
	SET(CMAKE_XCODE_ATTRIBUTE_GCC_PRECOMPILE_PREFIX_HEADER YES)
	SET(CMAKE_XCODE_ATTRIBUTE_GCC_PREFIX_HEADER "src/core/config.h")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -stdlib=libc++ -g -Wall")
	SET(CMAKE_XCODE_ATTRIBUTE_GCC_ENABLE_SSE41_EXTENSIONS YES)
	SET(CMAKE_XCODE_ATTRIBUTE_GCC_UNROLL_LOOPS YES)
	SET(CMAKE_XCODE_ATTRIBUTE_GCC_OPTIMIZATION_LEVEL "fast")
	SET(CMAKE_OSX_DEPLOYMENT_TARGET "10.10")
	#SET(CMAKE_XCODE_ATTRIBUTE_CLANG_ENABLE_MODULES YES)
ELSEIF(UNIX)
	ADD_DEFINITIONS(-D__UNIX__)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
ENDIF()

IF(${J_PLATFORM_ANDROID})
	INCLUDE_DIRECTORIES(${ANDROID_NDK}/sources/android/native_app_glue)
	ADD_DEFINITIONS(-D__ANDROID__)
ENDIF()

FOREACH(i ${CMAKE_CXX_COMPILE_FEATURES})
	IF(${i} STREQUAL cxx_constexpr)
		ADD_DEFINITIONS(-D__CONST_EXPR_SUPPORTED__)
	ENDIF()
ENDFOREACH()

ADD_SUBDIRECTORY(ext)
ADD_SUBDIRECTORY(src)

